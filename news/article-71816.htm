<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://vpntiktok.github.io/news/article-71816.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Go 互斥锁（sync.Mutex）和 读写锁（sync.RWMutex）</title>
        <meta name="description" content="Go 互斥锁（sync.Mutex）和 读写锁（sync.RWMutex）   什么时候需要用到锁？ 互斥锁（sync.Mutex） 读写锁（sync.RWMutex） 互斥锁和读写锁的性能对比   " />
        <link rel="icon" href="/assets/website/img/singboxwindows/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="VPN Tiktok 机场订阅节点中文网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://vpntiktok.github.io/news/article-71816.htm" />
    <meta property="og:site_name" content="VPN Tiktok 机场订阅节点中文网" />
    <meta property="og:title" content="Go 互斥锁（sync.Mutex）和 读写锁（sync.RWMutex）" />
    <meta property="og:image" content="https://vpntiktok.github.io/uploads/20240731/de60afb40763b7b1e7e200baaf4917aa.webp" />
        <meta property="og:release_date" content="2025-03-11T07:48:23" />
    <meta property="og:updated_time" content="2025-03-11T07:48:23" />
        <meta property="og:description" content="Go 互斥锁（sync.Mutex）和 读写锁（sync.RWMutex）   什么时候需要用到锁？ 互斥锁（sync.Mutex） 读写锁（sync.RWMutex） 互斥锁和读写锁的性能对比   " />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Go 互斥锁（sync.Mutex）和 读写锁（sync.RWMutex）">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <link rel="stylesheet" href="/assets/website/css/singboxwindows/app.css">
    <link href="https://fonts.googleapis.com/css?family=Nunito:300,400,500,600,700,800,900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome-font-awesome.min.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-WMKTGTP287"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-WMKTGTP287');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <nav class="navbar navbar-expand-lg fixed-top py-3 navbar-light" id="mainNav">
        <div class="container"> 
            <a class="navbar-brand" href="/">
                        <span>VPN Tiktok</span>
                        </a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation"> <span class="navbar-toggler-icon"></span> </button>
            <div class="collapse navbar-collapse" id="navbarResponsive">
                <ul class="navbar-nav ml-auto">
                                        <li class="nav-item"> <a class="nav-link" href="/">首页</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/free-nodes/">免费节点</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/paid-subscribe/">推荐机场</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/news/">新闻资讯</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/client.htm">客户端</a> </li>
                                    </ul>
            </div>
        </div>
    </nav>
    <main role="main">
        <div class="contact_header jumbotron text-center">
            <h1 class="display-4">Go 互斥锁（sync.Mutex）和 读写锁（sync.RWMutex）</h1>
            <p>
                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
            </p>
        </div>
        <section class="bg-image-2 position-relative"> <img src="/assets/website/img/singboxwindows/mix-icons.png" alt="" class="bg-img-2">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-atelier-sulphurpool-light"> <div class="toc"> <h3>Go 互斥锁（sync.Mutex）和 读写锁（sync.RWMutex） </h3> <ul> <li><a href="#_3" rel="nofollow">什么时候需要用到锁？</a></li> <li><a href="#syncMutex_10" rel="nofollow">互斥锁（sync.Mutex）</a></li> <li><a href="#syncRWMutex_72" rel="nofollow">读写锁（sync.RWMutex）</a></li> <li><a href="#_115" rel="nofollow">互斥锁和读写锁的性能对比</a></li> <li> <ul> <li><a href="#1_118" rel="nofollow">1）使用互斥锁：</a></li> <li><a href="#2_175" rel="nofollow">2）使用读写锁</a></li> <li><a href="#_233" rel="nofollow">结论</a></li> </ul> </li> <li><a href="#_236" rel="nofollow">关于互斥锁的补充</a></li> <li><a href="#_254" rel="nofollow">关于读写锁的补充</a></li> </ul> </div> </h1> <p>当程序中就一个线程的时候，是不需要加锁的，但是通常实际的代码不会只是单线程，所以这个时候就需要用到锁了，那么关于锁的使用场景主要涉及到哪些呢？</p> <ul> <li>多个线程在读相同的数据时</li> <li>多个线程在写相同的数据时</li> <li>同一个资源，有读又有写</li> </ul> </h1> <p>互斥锁是一种常用的控制共享资源访问的方法，它能够保证同时只有一个 goroutine 可以访问到共享资源（同一个时刻只有一个线程能够拿到锁）</p> <p>先通过一个并发读写的例子演示一下，当多线程同时访问全局变量时，结果会怎样？</p> <pre><code class="prism language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span>   <span class="token keyword">var</span> count <span class="token builtin">int</span>   <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{<!-- --></span>                 count <span class="token operator">++</span>             <span class="token punctuation">}</span>             fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>         <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>       fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>  <span class="token comment">//等待子线程全部结束</span> <span class="token punctuation">}</span>   运行结果： <span class="token number">980117</span> <span class="token number">1011352</span>  <span class="token comment">//最后的结果基本不可能是我们想看到的：200000</span> </code></pre> <p>修改代码，在累加的地方添加互斥锁，就能保证我们每次得到的结果都是想要的值</p> <pre><code class="prism language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span>     <span class="token string">"sync"</span> <span class="token punctuation">)</span>  <span class="token keyword">var</span> <span class="token punctuation">(</span>     count <span class="token builtin">int</span>     lock sync<span class="token punctuation">.</span>Mutex <span class="token punctuation">)</span>  <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{<!-- --></span>                 lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 count <span class="token operator">++</span>                 lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">}</span>             fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>         <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>      fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>  <span class="token comment">//等待子线程全部结束</span> <span class="token punctuation">}</span>  运行结果： <span class="token number">1952533</span> <span class="token number">2000000</span>  <span class="token comment">//最后的线程打印输出</span> </code></pre> </h1> <p>在读多写少的环境中，可以优先使用读写互斥锁（sync.RWMutex），它比互斥锁更加高效。sync 包中的 RWMutex 提供了读写互斥锁的封装</p> <p>读写锁分为：读锁和写锁</p> <ul> <li>如果设置了一个写锁，那么其它读的线程以及写的线程都拿不到锁，这个时候，与互斥锁的功能相同</li> <li>如果设置了一个读锁，那么其它写的线程是拿不到锁的，但是其它读的线程是可以拿到锁</li> </ul> <p>通过设置写锁，同样可以实现数据的一致性：</p> <pre><code class="prism language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span>     <span class="token string">"sync"</span> <span class="token punctuation">)</span>   <span class="token keyword">var</span> <span class="token punctuation">(</span>     count <span class="token builtin">int</span>     rwLock sync<span class="token punctuation">.</span>RWMutex <span class="token punctuation">)</span>   <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{<!-- --></span>                 rwLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 count <span class="token operator">++</span>                 rwLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">}</span>             fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>         <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>       fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>  <span class="token comment">//等待子线程全部结束</span> <span class="token punctuation">}</span>   运行结果： <span class="token number">1968637</span> <span class="token number">2000000</span>  </code></pre> </h1> <p>demo：制作一个读多写少的例子，分别开启 3 个 goroutine 进行读和写，输出最终的读写次数</p> <h2> <a id="1_118" rel="nofollow"></a>1）使用互斥锁：</h2> <pre><code class="prism language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>     <span class="token string">"fmt"</span>     <span class="token string">"sync"</span>     <span class="token string">"time"</span> <span class="token punctuation">)</span>   <span class="token keyword">var</span> <span class="token punctuation">(</span>     count  <span class="token builtin">int</span>     <span class="token comment">//互斥锁</span>     countGuard sync<span class="token punctuation">.</span>Mutex <span class="token punctuation">)</span>   <span class="token keyword">func</span> <span class="token function">read</span><span class="token punctuation">(</span>mapA <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     <span class="token keyword">for</span> <span class="token punctuation">{<!-- --></span>         countGuard<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">var</span> <span class="token boolean">_</span> <span class="token builtin">string</span> <span class="token operator">=</span> mapA<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span>         count <span class="token operator">+=</span> <span class="token number">1</span>         countGuard<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>   <span class="token keyword">func</span> <span class="token function">write</span><span class="token punctuation">(</span>mapA <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">for</span> <span class="token punctuation">{<!-- --></span>         countGuard<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         mapA<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"johny"</span>         count <span class="token operator">+=</span> <span class="token number">1</span>         time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>         countGuard<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>       <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">var</span> num <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">3</span>     <span class="token keyword">var</span> mapA <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{<!-- --></span><span class="token string">"nema"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">}</span>       <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">go</span> <span class="token function">read</span><span class="token punctuation">(</span>mapA<span class="token punctuation">)</span>     <span class="token punctuation">}</span>       <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">go</span> <span class="token function">write</span><span class="token punctuation">(</span>mapA<span class="token punctuation">)</span>     <span class="token punctuation">}</span>       time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>     fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"最终读写次数：%d\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token punctuation">}</span>   运行结果： 最终读写次数：<span class="token number">3766</span>  </code></pre> <h2> <a id="2_175" rel="nofollow"></a>2）使用读写锁</h2> <pre><code class="prism language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>     <span class="token string">"fmt"</span>     <span class="token string">"sync"</span>     <span class="token string">"time"</span> <span class="token punctuation">)</span>   <span class="token keyword">var</span> <span class="token punctuation">(</span>     count  <span class="token builtin">int</span>     <span class="token comment">//读写锁</span>     countGuard sync<span class="token punctuation">.</span>RWMutex <span class="token punctuation">)</span>   <span class="token keyword">func</span> <span class="token function">read</span><span class="token punctuation">(</span>mapA <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     <span class="token keyword">for</span> <span class="token punctuation">{<!-- --></span>         countGuard<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//这里定义了一个读锁</span>         <span class="token keyword">var</span> <span class="token boolean">_</span> <span class="token builtin">string</span> <span class="token operator">=</span> mapA<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span>         count <span class="token operator">+=</span> <span class="token number">1</span>         countGuard<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>   <span class="token keyword">func</span> <span class="token function">write</span><span class="token punctuation">(</span>mapA <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">for</span> <span class="token punctuation">{<!-- --></span>         countGuard<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//这里定义了一个写锁</span>         mapA<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"johny"</span>         count <span class="token operator">+=</span> <span class="token number">1</span>         time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>         countGuard<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>       <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">var</span> num <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">3</span>     <span class="token keyword">var</span> mapA <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{<!-- --></span><span class="token string">"nema"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">}</span>       <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">go</span> <span class="token function">read</span><span class="token punctuation">(</span>mapA<span class="token punctuation">)</span>     <span class="token punctuation">}</span>       <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">go</span> <span class="token function">write</span><span class="token punctuation">(</span>mapA<span class="token punctuation">)</span>     <span class="token punctuation">}</span>       time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>     fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"最终读写次数：%d\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token punctuation">}</span>   运行结果： 最终读写次数：<span class="token number">8165</span>  </code></pre> <h2> <a id="_233" rel="nofollow"></a>结论</h2> <p>结果差距大概在 2 倍左右，读锁的效率要快很多！</p> </h1> <p>互斥锁需要注意的问题：</p> <ol> <li>不要重复锁定互斥锁</li> <li>不要忘记解锁互斥锁，必要时使用 defer 语句</li> <li>不要在多个函数之间直接传递互斥锁</li> </ol> <p>死锁： 当前程序中的主 goroutine 以及我们启用的那些 goroutine 都已经被阻塞，这些 goroutine 可以被称为用户级的 goroutine 这就相当于整个程序已经停滞不前了，并且这个时候 go 程序会抛出如下的 panic：</p> <pre><code class="prism language-go">fatal <span class="token builtin">error</span><span class="token punctuation">:</span> all goroutines are asleep <span class="token operator">-</span> deadlock<span class="token operator">!</span> </code></pre> <p>并且go语言运行时系统抛出自行抛出的panic都属于致命性错误，都是无法被恢复的，调用recover函数对他们起不到任何作用</p> <p>Go语言中的互斥锁是开箱即用的，也就是我们声明一个sync.Mutex 类型的变量，就可以直接使用它了，<strong>需要注意：该类型是一个结构体类型，属于值类型的一种，将它当做参数传给一个函数，将它从函数中返回，把它赋值给其他变量，让它进入某个管道，都会导致他的副本的产生。并且原值和副本以及多个副本之间是完全独立的，他们都是不同的互斥锁</strong>，所以不应该将锁通过函数的参数进行传递。</p> </h1> <ol> <li>在写锁已被锁定的情况下再次试图锁定写锁，会阻塞当前的goroutine</li> <li>在写锁已被锁定的情况下再次试图锁定读锁，也会阻塞当前的goroutine</li> <li>在读锁已被锁定的情况下试图锁定写锁，同样会阻塞当前的goroutine</li> <li>在读锁已被锁定的情况下再试图锁定读锁，并不会阻塞当前的goroutine</li> </ol> <p>对于某个受到读写锁保护的共享资源，多个写操作不能同时进行，写操作和读操作也不能同时进行，但多个读操作却可以同时进行</p> <p>对写锁进行解锁，会唤醒“所有因试图锁定读锁，而被阻塞的goroutine”, 并且这个通常会使他们都成功完成对读锁的锁定（这个还不理解）</p> <p>对读锁进行解锁，只会在没有其他读锁锁定的前提下，唤醒“因试图锁定写锁，而被阻塞的 goroutine” 并且只会有一个被唤醒的 goroutine 能够成功完成对写锁的锁定，其他的 goroutine 还要在原处继续等待，至于哪一个goroutine，那么就要看谁等待的事件最长</p> <p>解锁读写锁中未被锁定的写锁， 会立即引发panic ，对其中的读锁也是如此，并且同样是不可恢复的。</p> <p>原文链接：<br /> https://www.cnblogs.com/kaichenkai/p/11108303.html<br /> https://www.cnblogs.com/zhaof/p/8636384.html</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-71154.htm">领养协议书模板图片（领养协议里最重要的是写什么）</a></p>
                                        <p>下一个：<a href="/news/article-71818.htm">宠物店寄养会有什么风险（宠物店寄养一般怎么收费）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-2-26-node-share.htm" title="VPN Tiktok | 2月26日22.3M/S|免费VPN/Clash/Shadowrocket/V2ray/SSR免费节点订阅分享">VPN Tiktok | 2月26日22.3M/S|免费VPN/Clash/Shadowrocket/V2ray/SSR免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-69847.htm" title="狗粮品牌都有哪些（狗粮品牌都有哪些）">狗粮品牌都有哪些（狗粮品牌都有哪些）</a></li>
                        <li class="py-2"><a href="/news/article-65404.htm" title="Nodejs对数据库的增删改查">Nodejs对数据库的增删改查</a></li>
                        <li class="py-2"><a href="/news/article-64784.htm" title="动物疫苗多少钱一支啊图片及价格查询表（动物疫苗法最新消息2019）">动物疫苗多少钱一支啊图片及价格查询表（动物疫苗法最新消息2019）</a></li>
                        <li class="py-2"><a href="/news/article-67897.htm" title="基于 Apache Hudi 构建增量和无限回放事件流的 OLAP 平台">基于 Apache Hudi 构建增量和无限回放事件流的 OLAP 平台</a></li>
                        <li class="py-2"><a href="/news/article-65402.htm" title="Day02—Python的变量类型、变量命名、变量类型检查、变量类型转换、运算符">Day02—Python的变量类型、变量命名、变量类型检查、变量类型转换、运算符</a></li>
                        <li class="py-2"><a href="/news/article-62956.htm" title="动物诊疗有限公司 动物诊疗有限公司和动物诊所区别">动物诊疗有限公司 动物诊疗有限公司和动物诊所区别</a></li>
                        <li class="py-2"><a href="/news/article-61762.htm" title="动物注射疫苗简报怎么写范文大全（给动物打疫苗的简报）">动物注射疫苗简报怎么写范文大全（给动物打疫苗的简报）</a></li>
                        <li class="py-2"><a href="/news/article-62363.htm" title="养猫的人容易得15种病疾病是什么（养猫容易得哪些病）">养猫的人容易得15种病疾病是什么（养猫容易得哪些病）</a></li>
                        <li class="py-2"><a href="/news/article-67894.htm" title="使用Python实现KNN算法解决简单分类问题">使用Python实现KNN算法解决简单分类问题</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">33</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">43</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section>
                <footer class="pt-4 pb-5 bg-light position-relative">
            <div class="container">
                <div class="row">
                    <div class="col-md-12 mt-4">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                        <a href="/">VPN Tiktok 机场订阅节点中文网</a> 版权所有 Powered by WordPress
                    </div>
                </div>
                <!--/.row-->
            </div>
            <!--/.container-->
        </footer>
        <script src="/assets/website/js/frontend/singboxwindows/jquery-3.5.1.min.js"></script>
        <script src="https://cdn.bootcdn.net/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
        <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
        <script src="/assets/website/js/frontend/singboxwindows/app.js"></script>
        <script src="/assets/website/js/frontend/G.js"></script>
    </main>
</body>

</html>